// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	Calculator(ctx context.Context, in *ManyRequest, opts ...grpc.CallOption) (GreetService_CalculatorClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Calculator(ctx context.Context, in *ManyRequest, opts ...grpc.CallOption) (GreetService_CalculatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GreetService_serviceDesc.Streams[0], "/files.GreetService/Calculator", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceCalculatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_CalculatorClient interface {
	Recv() (*ManyResponse, error)
	grpc.ClientStream
}

type greetServiceCalculatorClient struct {
	grpc.ClientStream
}

func (x *greetServiceCalculatorClient) Recv() (*ManyResponse, error) {
	m := new(ManyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	Calculator(*ManyRequest, GreetService_CalculatorServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) Calculator(*ManyRequest, GreetService_CalculatorServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculator not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&_GreetService_serviceDesc, srv)
}

func _GreetService_Calculator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).Calculator(m, &greetServiceCalculatorServer{stream})
}

type GreetService_CalculatorServer interface {
	Send(*ManyResponse) error
	grpc.ServerStream
}

type greetServiceCalculatorServer struct {
	grpc.ServerStream
}

func (x *greetServiceCalculatorServer) Send(m *ManyResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GreetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "files.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculator",
			Handler:       _GreetService_Calculator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto_files/files.proto",
}
